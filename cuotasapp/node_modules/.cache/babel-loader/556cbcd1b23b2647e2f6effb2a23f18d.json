{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate_format(it, $keyword) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + '.' + $keyword;\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n\n    return out;\n  }\n\n  var $isData = it.opts.v5 && $schema && $schema.$data,\n      $schemaValue;\n\n  if ($isData) {\n    out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n\n  var $unknownFormats = it.opts.unknownFormats,\n      $allowUnknown = Array.isArray($unknownFormats);\n\n  if ($isData) {\n    var $format = 'format' + $lvl;\n    out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var isObject' + $lvl + ' = typeof ' + $format + ' == \\'object\\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; if (isObject' + $lvl + ') { ';\n\n    if (it.async) {\n      out += ' var async' + $lvl + ' = ' + $format + '.async; ';\n    }\n\n    out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';\n\n    if ($isData) {\n      out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \\'string\\') || ';\n    }\n\n    out += ' (';\n\n    if ($unknownFormats === true || $allowUnknown) {\n      out += ' (' + $schemaValue + ' && !' + $format + ' ';\n\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';\n      }\n\n      out += ') || ';\n    }\n\n    out += ' (' + $format + ' && !(typeof ' + $format + ' == \\'function\\' ? ';\n\n    if (it.async) {\n      out += ' (async' + $lvl + ' ? ' + it.yieldAwait + ' ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';\n    } else {\n      out += ' ' + $format + '(' + $data + ') ';\n    }\n\n    out += ' : ' + $format + '.test(' + $data + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n\n    if (!$format) {\n      if ($unknownFormats === true || $allowUnknown && $unknownFormats.indexOf($schema) == -1) {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      } else {\n        if (!$allowUnknown) {\n          console.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n          if ($unknownFormats !== 'ignore') console.warn('In the next major version it will throw exception. See option unknownFormats for more information');\n        }\n\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n\n        return out;\n      }\n    }\n\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(' + it.yieldAwait + ' ' + $formatRef + '(' + $data + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n\n      if (typeof $format == 'function') {\n        out += ' ' + $formatRef + '(' + $data + ') ';\n      } else {\n        out += ' ' + $formatRef + '.test(' + $data + ') ';\n      }\n\n      out += ') { ';\n    }\n  }\n\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = '';\n  /* istanbul ignore else */\n\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || 'format') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';\n\n    if ($isData) {\n      out += '' + $schemaValue;\n    } else {\n      out += '' + it.util.toQuotedString($schema);\n    }\n\n    out += '  } ';\n\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n\n      if ($isData) {\n        out += '\\' + ' + $schemaValue + ' + \\'';\n      } else {\n        out += '' + it.util.escapeQuotes($schema);\n      }\n\n      out += '\"\\' ';\n    }\n\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n\n      if ($isData) {\n        out += 'validate.schema' + $schemaPath;\n      } else {\n        out += '' + it.util.toQuotedString($schema);\n      }\n\n      out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n    }\n\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n\n  var __err = out;\n  out = $$outStack.pop();\n\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + __err + ']); ';\n    } else {\n      out += ' validate.errors = [' + __err + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n\n  out += ' } ';\n\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n\n  return out;\n};","map":{"version":3,"sources":["C:/Users/juanm/Documents/Proyecto_web/ProyectoFinal-IAW/cuotasapp/node_modules/mercadopago/node_modules/ajv/lib/dotjs/format.js"],"names":["module","exports","generate_format","it","$keyword","out","$lvl","level","$dataLvl","dataLevel","$schema","schema","$schemaPath","schemaPath","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$errorKeyword","$data","format","$isData","v5","$schemaValue","util","getData","dataPathArr","$unknownFormats","unknownFormats","$allowUnknown","Array","isArray","$format","async","yieldAwait","formats","indexOf","Error","console","warn","$isObject","RegExp","validate","$async","$formatRef","getProperty","$$outStack","push","createErrors","errorPath","toQuotedString","messages","escapeQuotes","verbose","__err","pop","compositeRule"],"mappings":"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","sourcesContent":["'use strict';\nmodule.exports = function generate_format(it, $keyword) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + '.' + $keyword;\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n    return out;\n  }\n  var $isData = it.opts.v5 && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $unknownFormats = it.opts.unknownFormats,\n    $allowUnknown = Array.isArray($unknownFormats);\n  if ($isData) {\n    var $format = 'format' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var isObject' + ($lvl) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; if (isObject' + ($lvl) + ') { ';\n    if (it.async) {\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n    }\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n    }\n    out += ' (';\n    if ($unknownFormats === true || $allowUnknown) {\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n      }\n      out += ') || ';\n    }\n    out += ' (' + ($format) + ' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n    if (it.async) {\n      out += ' (async' + ($lvl) + ' ? ' + (it.yieldAwait) + ' ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n    } else {\n      out += ' ' + ($format) + '(' + ($data) + ') ';\n    }\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n    if (!$format) {\n      if ($unknownFormats === true || ($allowUnknown && $unknownFormats.indexOf($schema) == -1)) {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      } else {\n        if (!$allowUnknown) {\n          console.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n          if ($unknownFormats !== 'ignore') console.warn('In the next major version it will throw exception. See option unknownFormats for more information');\n        }\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      }\n    }\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(' + (it.yieldAwait) + ' ' + ($formatRef) + '(' + ($data) + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n      if (typeof $format == 'function') {\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n      } else {\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n      }\n      out += ') { ';\n    }\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || 'format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n"]},"metadata":{},"sourceType":"script"}