{"ast":null,"code":"'use strict';\n\nmodule.exports = function generate_properties(it, $keyword) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + '.' + $keyword;\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt;\n  var $schemaKeys = Object.keys($schema || {}),\n      $pProperties = it.schema.patternProperties || {},\n      $pPropertyKeys = Object.keys($pProperties),\n      $aProperties = it.schema.additionalProperties,\n      $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n      $noAdditional = $aProperties === false,\n      $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n      $removeAdditional = it.opts.removeAdditional,\n      $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n      $ownProperties = it.opts.ownProperties,\n      $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n\n  if (it.opts.v5) {\n    var $pgProperties = it.schema.patternGroups || {},\n        $pgPropertyKeys = Object.keys($pgProperties);\n  }\n\n  out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';\n\n  if ($checkAdditional) {\n    out += ' for (var ' + $key + ' in ' + $data + ') {  ';\n\n    if ($ownProperties) {\n      out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';\n    }\n\n    if ($someProperties) {\n      out += ' var isAdditional' + $lvl + ' = !(false ';\n\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 5) {\n          out += ' || validate.schema' + $schemaPath + '[' + $key + '] ';\n        } else {\n          var arr1 = $schemaKeys;\n\n          if (arr1) {\n            var $propertyKey,\n                i1 = -1,\n                l1 = arr1.length - 1;\n\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';\n            }\n          }\n        }\n      }\n\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n\n        if (arr2) {\n          var $pProperty,\n              $i = -1,\n              l2 = arr2.length - 1;\n\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';\n          }\n        }\n      }\n\n      if (it.opts.v5 && $pgPropertyKeys && $pgPropertyKeys.length) {\n        var arr3 = $pgPropertyKeys;\n\n        if (arr3) {\n          var $pgProperty,\n              $i = -1,\n              l3 = arr3.length - 1;\n\n          while ($i < l3) {\n            $pgProperty = arr3[$i += 1];\n            out += ' || ' + it.usePattern($pgProperty) + '.test(' + $key + ') ';\n          }\n        }\n      }\n\n      out += ' ); if (isAdditional' + $lvl + ') { ';\n    }\n\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + $data + '[' + $key + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + $data + '[' + $key + ']; ';\n        } else {\n          out += ' ' + $nextValid + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = '';\n          /* istanbul ignore else */\n\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ($errorKeyword || 'additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \\'' + $additionalProperty + '\\' } ';\n\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'should NOT have additional properties\\' ';\n            }\n\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n            }\n\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n\n          var __err = out;\n          out = $$outStack.pop();\n\n          if (!it.compositeRule && $breakOnError) {\n            /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + __err + ']); ';\n            } else {\n              out += ' validate.errors = [' + __err + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n\n          $errSchemaPath = $currErrSchemaPath;\n\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + $errs + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n        }\n      }\n\n      it.errorPath = $currentErrorPath;\n    }\n\n    if ($someProperties) {\n      out += ' } ';\n    }\n\n    out += ' }  ';\n\n    if ($breakOnError) {\n      out += ' if (' + $nextValid + ') { ';\n      $closingBraces += '}';\n    }\n  }\n\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n\n  if ($schemaKeys.length) {\n    var arr4 = $schemaKeys;\n\n    if (arr4) {\n      var $propertyKey,\n          i4 = -1,\n          l4 = arr4.length - 1;\n\n      while (i4 < l4) {\n        $propertyKey = arr4[i4 += 1];\n        var $sch = $schema[$propertyKey];\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n              $passData = $data + $prop,\n              $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + $nextData + ' = ' + $passData + '; ';\n          }\n\n          if ($hasDefault) {\n            out += ' ' + $code + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                  $currErrSchemaPath = $errSchemaPath,\n                  $missingProperty = it.util.escapeQuotes($propertyKey);\n\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'required') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \\'' + $missingProperty + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + $missingProperty + '\\\\\\'';\n                  }\n\n                  out += '\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = true; } else { ';\n              } else {\n                out += ' if (' + $useData + ' !== undefined) { ';\n              }\n            }\n\n            out += ' ' + $code + ' } ';\n          }\n        }\n\n        if ($breakOnError) {\n          out += ' if (' + $nextValid + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n\n  var arr5 = $pPropertyKeys;\n\n  if (arr5) {\n    var $pProperty,\n        i5 = -1,\n        l5 = arr5.length - 1;\n\n    while (i5 < l5) {\n      $pProperty = arr5[i5 += 1];\n      var $sch = $pProperties[$pProperty];\n\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $it.schema = $sch;\n        $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n        $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n        out += ' for (var ' + $key + ' in ' + $data + ') {  ';\n\n        if ($ownProperties) {\n          out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';\n        }\n\n        out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';\n        $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n        var $passData = $data + '[' + $key + ']';\n        $it.dataPathArr[$dataNxt] = $key;\n        var $code = it.validate($it);\n        $it.baseId = $currentBaseId;\n\n        if (it.util.varOccurences($code, $nextData) < 2) {\n          out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n        } else {\n          out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n        }\n\n        if ($breakOnError) {\n          out += ' if (!' + $nextValid + ') break; ';\n        }\n\n        out += ' } ';\n\n        if ($breakOnError) {\n          out += ' else ' + $nextValid + ' = true; ';\n        }\n\n        out += ' }  ';\n\n        if ($breakOnError) {\n          out += ' if (' + $nextValid + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n\n  if (it.opts.v5) {\n    var arr6 = $pgPropertyKeys;\n\n    if (arr6) {\n      var $pgProperty,\n          i6 = -1,\n          l6 = arr6.length - 1;\n\n      while (i6 < l6) {\n        $pgProperty = arr6[i6 += 1];\n        var $pgSchema = $pgProperties[$pgProperty],\n            $sch = $pgSchema.schema;\n\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';\n          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';\n          out += ' var pgPropCount' + $lvl + ' = 0; for (var ' + $key + ' in ' + $data + ') {  ';\n\n          if ($ownProperties) {\n            out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';\n          }\n\n          out += ' if (' + it.usePattern($pgProperty) + '.test(' + $key + ')) { pgPropCount' + $lvl + '++; ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';\n          } else {\n            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';\n          }\n\n          if ($breakOnError) {\n            out += ' if (!' + $nextValid + ') break; ';\n          }\n\n          out += ' } ';\n\n          if ($breakOnError) {\n            out += ' else ' + $nextValid + ' = true; ';\n          }\n\n          out += ' }  ';\n\n          if ($breakOnError) {\n            out += ' if (' + $nextValid + ') { ';\n            $closingBraces += '}';\n          }\n\n          var $pgMin = $pgSchema.minimum,\n              $pgMax = $pgSchema.maximum;\n\n          if ($pgMin !== undefined || $pgMax !== undefined) {\n            out += ' var ' + $valid + ' = true; ';\n            var $currErrSchemaPath = $errSchemaPath;\n\n            if ($pgMin !== undefined) {\n              var $limit = $pgMin,\n                  $reason = 'minimum',\n                  $moreOrLess = 'less';\n              out += ' ' + $valid + ' = pgPropCount' + $lvl + ' >= ' + $pgMin + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';\n              out += '  if (!' + $valid + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \\'' + $reason + '\\', limit: ' + $limit + ', pattern: \\'' + it.util.escapeQuotes($pgProperty) + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern \"' + it.util.escapeQuotes($pgProperty) + '\"\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              out += ' } ';\n\n              if ($pgMax !== undefined) {\n                out += ' else ';\n              }\n            }\n\n            if ($pgMax !== undefined) {\n              var $limit = $pgMax,\n                  $reason = 'maximum',\n                  $moreOrLess = 'more';\n              out += ' ' + $valid + ' = pgPropCount' + $lvl + ' <= ' + $pgMax + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';\n              out += '  if (!' + $valid + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = '';\n              /* istanbul ignore else */\n\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \\'' + $reason + '\\', limit: ' + $limit + ', pattern: \\'' + it.util.escapeQuotes($pgProperty) + '\\' } ';\n\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern \"' + it.util.escapeQuotes($pgProperty) + '\"\\' ';\n                }\n\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';\n                }\n\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n\n              var __err = out;\n              out = $$outStack.pop();\n\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + __err + ']); ';\n                } else {\n                  out += ' validate.errors = [' + __err + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n\n              out += ' } ';\n            }\n\n            $errSchemaPath = $currErrSchemaPath;\n\n            if ($breakOnError) {\n              out += ' if (' + $valid + ') { ';\n              $closingBraces += '}';\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if ($breakOnError) {\n    out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';\n  }\n\n  out = it.util.cleanUpCode(out);\n  return out;\n};","map":{"version":3,"sources":["C:/Users/juanm/Documents/Proyecto_web/ProyectoFinal-IAW/cuotasapp/node_modules/mercadopago/node_modules/ajv/lib/dotjs/properties.js"],"names":["module","exports","generate_properties","it","$keyword","out","$lvl","level","$dataLvl","dataLevel","$schema","schema","$schemaPath","schemaPath","$errSchemaPath","errSchemaPath","$breakOnError","opts","allErrors","$errorKeyword","$data","$valid","$errs","$it","util","copy","$closingBraces","$nextValid","$key","$dataNxt","$nextData","$schemaKeys","Object","keys","$pProperties","patternProperties","$pPropertyKeys","$aProperties","additionalProperties","$someProperties","length","$noAdditional","$additionalIsSchema","$removeAdditional","removeAdditional","$checkAdditional","$ownProperties","ownProperties","$currentBaseId","baseId","$required","required","v5","loopRequired","$requiredHash","toHash","$pgProperties","patternGroups","$pgPropertyKeys","arr1","$propertyKey","i1","l1","toQuotedString","arr2","$pProperty","$i","l2","usePattern","arr3","$pgProperty","l3","$currentErrorPath","errorPath","$additionalProperty","_errorDataPathProperty","getPathExpr","jsonPointers","$currErrSchemaPath","$$outStack","push","createErrors","messages","verbose","__err","pop","compositeRule","async","$wasComposite","$passData","dataPathArr","$code","validate","varOccurences","varReplace","$useDefaults","useDefaults","arr4","i4","l4","$sch","schemaHasRules","RULES","all","$prop","getProperty","$hasDefault","default","undefined","escapeFragment","getPath","$useData","$missingProperty","escapeQuotes","arr5","i5","l5","arr6","i6","l6","$pgSchema","$pgMin","minimum","$pgMax","maximum","$limit","$reason","$moreOrLess","cleanUpCode"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,mBAAT,CAA6BC,EAA7B,EAAiCC,QAAjC,EAA2C;AAC1D,MAAIC,GAAG,GAAG,GAAV;AACA,MAAIC,IAAI,GAAGH,EAAE,CAACI,KAAd;AACA,MAAIC,QAAQ,GAAGL,EAAE,CAACM,SAAlB;AACA,MAAIC,OAAO,GAAGP,EAAE,CAACQ,MAAH,CAAUP,QAAV,CAAd;AACA,MAAIQ,WAAW,GAAGT,EAAE,CAACU,UAAH,GAAgB,GAAhB,GAAsBT,QAAxC;AACA,MAAIU,cAAc,GAAGX,EAAE,CAACY,aAAH,GAAmB,GAAnB,GAAyBX,QAA9C;AACA,MAAIY,aAAa,GAAG,CAACb,EAAE,CAACc,IAAH,CAAQC,SAA7B;AACA,MAAIC,aAAJ;AACA,MAAIC,KAAK,GAAG,UAAUZ,QAAQ,IAAI,EAAtB,CAAZ;AACA,MAAIa,MAAM,GAAG,UAAUf,IAAvB;AACA,MAAIgB,KAAK,GAAG,WAAWhB,IAAvB;AACA,MAAIiB,GAAG,GAAGpB,EAAE,CAACqB,IAAH,CAAQC,IAAR,CAAatB,EAAb,CAAV;AACA,MAAIuB,cAAc,GAAG,EAArB;AACAH,EAAAA,GAAG,CAAChB,KAAJ;AACA,MAAIoB,UAAU,GAAG,UAAUJ,GAAG,CAAChB,KAA/B;AACA,MAAIqB,IAAI,GAAG,QAAQtB,IAAnB;AAAA,MACEuB,QAAQ,GAAGN,GAAG,CAACd,SAAJ,GAAgBN,EAAE,CAACM,SAAH,GAAe,CAD5C;AAAA,MAEEqB,SAAS,GAAG,SAASD,QAFvB;AAGA,MAAIE,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYvB,OAAO,IAAI,EAAvB,CAAlB;AAAA,MACEwB,YAAY,GAAG/B,EAAE,CAACQ,MAAH,CAAUwB,iBAAV,IAA+B,EADhD;AAAA,MAEEC,cAAc,GAAGJ,MAAM,CAACC,IAAP,CAAYC,YAAZ,CAFnB;AAAA,MAGEG,YAAY,GAAGlC,EAAE,CAACQ,MAAH,CAAU2B,oBAH3B;AAAA,MAIEC,eAAe,GAAGR,WAAW,CAACS,MAAZ,IAAsBJ,cAAc,CAACI,MAJzD;AAAA,MAKEC,aAAa,GAAGJ,YAAY,KAAK,KALnC;AAAA,MAMEK,mBAAmB,GAAG,OAAOL,YAAP,IAAuB,QAAvB,IAAmCL,MAAM,CAACC,IAAP,CAAYI,YAAZ,EAA0BG,MANrF;AAAA,MAOEG,iBAAiB,GAAGxC,EAAE,CAACc,IAAH,CAAQ2B,gBAP9B;AAAA,MAQEC,gBAAgB,GAAGJ,aAAa,IAAIC,mBAAjB,IAAwCC,iBAR7D;AAAA,MASEG,cAAc,GAAG3C,EAAE,CAACc,IAAH,CAAQ8B,aAT3B;AAAA,MAUEC,cAAc,GAAG7C,EAAE,CAAC8C,MAVtB;AAWA,MAAIC,SAAS,GAAG/C,EAAE,CAACQ,MAAH,CAAUwC,QAA1B;AACA,MAAID,SAAS,IAAI,EAAE/C,EAAE,CAACc,IAAH,CAAQmC,EAAR,IAAcF,SAAS,CAAC9B,KAA1B,CAAb,IAAiD8B,SAAS,CAACV,MAAV,GAAmBrC,EAAE,CAACc,IAAH,CAAQoC,YAAhF,EAA8F,IAAIC,aAAa,GAAGnD,EAAE,CAACqB,IAAH,CAAQ+B,MAAR,CAAeL,SAAf,CAApB;;AAC9F,MAAI/C,EAAE,CAACc,IAAH,CAAQmC,EAAZ,EAAgB;AACd,QAAII,aAAa,GAAGrD,EAAE,CAACQ,MAAH,CAAU8C,aAAV,IAA2B,EAA/C;AAAA,QACEC,eAAe,GAAG1B,MAAM,CAACC,IAAP,CAAYuB,aAAZ,CADpB;AAED;;AACDnD,EAAAA,GAAG,IAAI,SAAUiB,KAAV,GAAmB,gBAAnB,GAAuCK,UAAvC,GAAqD,UAA5D;;AACA,MAAIkB,gBAAJ,EAAsB;AACpBxC,IAAAA,GAAG,IAAI,eAAgBuB,IAAhB,GAAwB,MAAxB,GAAkCR,KAAlC,GAA2C,OAAlD;;AACA,QAAI0B,cAAJ,EAAoB;AAClBzC,MAAAA,GAAG,IAAI,gDAAiDe,KAAjD,GAA0D,IAA1D,GAAkEQ,IAAlE,GAA0E,eAAjF;AACD;;AACD,QAAIW,eAAJ,EAAqB;AACnBlC,MAAAA,GAAG,IAAI,sBAAuBC,IAAvB,GAA+B,aAAtC;;AACA,UAAIyB,WAAW,CAACS,MAAhB,EAAwB;AACtB,YAAIT,WAAW,CAACS,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BnC,UAAAA,GAAG,IAAI,wBAAyBO,WAAzB,GAAwC,GAAxC,GAA+CgB,IAA/C,GAAuD,IAA9D;AACD,SAFD,MAEO;AACL,cAAI+B,IAAI,GAAG5B,WAAX;;AACA,cAAI4B,IAAJ,EAAU;AACR,gBAAIC,YAAJ;AAAA,gBAAkBC,EAAE,GAAG,CAAC,CAAxB;AAAA,gBACEC,EAAE,GAAGH,IAAI,CAACnB,MAAL,GAAc,CADrB;;AAEA,mBAAOqB,EAAE,GAAGC,EAAZ,EAAgB;AACdF,cAAAA,YAAY,GAAGD,IAAI,CAACE,EAAE,IAAI,CAAP,CAAnB;AACAxD,cAAAA,GAAG,IAAI,SAAUuB,IAAV,GAAkB,MAAlB,GAA4BzB,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBH,YAAvB,CAA5B,GAAoE,GAA3E;AACD;AACF;AACF;AACF;;AACD,UAAIxB,cAAc,CAACI,MAAnB,EAA2B;AACzB,YAAIwB,IAAI,GAAG5B,cAAX;;AACA,YAAI4B,IAAJ,EAAU;AACR,cAAIC,UAAJ;AAAA,cAAgBC,EAAE,GAAG,CAAC,CAAtB;AAAA,cACEC,EAAE,GAAGH,IAAI,CAACxB,MAAL,GAAc,CADrB;;AAEA,iBAAO0B,EAAE,GAAGC,EAAZ,EAAgB;AACdF,YAAAA,UAAU,GAAGD,IAAI,CAACE,EAAE,IAAI,CAAP,CAAjB;AACA7D,YAAAA,GAAG,IAAI,SAAUF,EAAE,CAACiE,UAAH,CAAcH,UAAd,CAAV,GAAuC,QAAvC,GAAmDrC,IAAnD,GAA2D,IAAlE;AACD;AACF;AACF;;AACD,UAAIzB,EAAE,CAACc,IAAH,CAAQmC,EAAR,IAAcM,eAAd,IAAiCA,eAAe,CAAClB,MAArD,EAA6D;AAC3D,YAAI6B,IAAI,GAAGX,eAAX;;AACA,YAAIW,IAAJ,EAAU;AACR,cAAIC,WAAJ;AAAA,cAAiBJ,EAAE,GAAG,CAAC,CAAvB;AAAA,cACEK,EAAE,GAAGF,IAAI,CAAC7B,MAAL,GAAc,CADrB;;AAEA,iBAAO0B,EAAE,GAAGK,EAAZ,EAAgB;AACdD,YAAAA,WAAW,GAAGD,IAAI,CAACH,EAAE,IAAI,CAAP,CAAlB;AACA7D,YAAAA,GAAG,IAAI,SAAUF,EAAE,CAACiE,UAAH,CAAcE,WAAd,CAAV,GAAwC,QAAxC,GAAoD1C,IAApD,GAA4D,IAAnE;AACD;AACF;AACF;;AACDvB,MAAAA,GAAG,IAAI,yBAA0BC,IAA1B,GAAkC,MAAzC;AACD;;AACD,QAAIqC,iBAAiB,IAAI,KAAzB,EAAgC;AAC9BtC,MAAAA,GAAG,IAAI,aAAce,KAAd,GAAuB,GAAvB,GAA8BQ,IAA9B,GAAsC,KAA7C;AACD,KAFD,MAEO;AACL,UAAI4C,iBAAiB,GAAGrE,EAAE,CAACsE,SAA3B;AACA,UAAIC,mBAAmB,GAAG,UAAU9C,IAAV,GAAiB,OAA3C;;AACA,UAAIzB,EAAE,CAACc,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClCxE,QAAAA,EAAE,CAACsE,SAAH,GAAetE,EAAE,CAACqB,IAAH,CAAQoD,WAAR,CAAoBzE,EAAE,CAACsE,SAAvB,EAAkC7C,IAAlC,EAAwCzB,EAAE,CAACc,IAAH,CAAQ4D,YAAhD,CAAf;AACD;;AACD,UAAIpC,aAAJ,EAAmB;AACjB,YAAIE,iBAAJ,EAAuB;AACrBtC,UAAAA,GAAG,IAAI,aAAce,KAAd,GAAuB,GAAvB,GAA8BQ,IAA9B,GAAsC,KAA7C;AACD,SAFD,MAEO;AACLvB,UAAAA,GAAG,IAAI,MAAOsB,UAAP,GAAqB,YAA5B;AACA,cAAImD,kBAAkB,GAAGhE,cAAzB;AACAA,UAAAA,cAAc,GAAGX,EAAE,CAACY,aAAH,GAAmB,uBAApC;AACA,cAAIgE,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,UAAAA,UAAU,CAACC,IAAX,CAAgB3E,GAAhB;AACAA,UAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,cAAIF,EAAE,CAAC8E,YAAH,KAAoB,KAAxB,EAA+B;AAC7B5E,YAAAA,GAAG,IAAI,oBAAoBc,aAAa,IAAI,sBAArC,IAA+D,sCAA/D,GAAyGhB,EAAE,CAACsE,SAA5G,GAAyH,iBAAzH,GAA8ItE,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBjD,cAAvB,CAA9I,GAAwL,qCAAxL,GAAiO4D,mBAAjO,GAAwP,OAA/P;;AACA,gBAAIvE,EAAE,CAACc,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B7E,cAAAA,GAAG,IAAI,wDAAP;AACD;;AACD,gBAAIF,EAAE,CAACc,IAAH,CAAQkE,OAAZ,EAAqB;AACnB9E,cAAAA,GAAG,IAAI,qDAAsDF,EAAE,CAACU,UAAzD,GAAuE,WAAvE,GAAsFO,KAAtF,GAA+F,GAAtG;AACD;;AACDf,YAAAA,GAAG,IAAI,KAAP;AACD,WATD,MASO;AACLA,YAAAA,GAAG,IAAI,MAAP;AACD;;AACD,cAAI+E,KAAK,GAAG/E,GAAZ;AACAA,UAAAA,GAAG,GAAG0E,UAAU,CAACM,GAAX,EAAN;;AACA,cAAI,CAAClF,EAAE,CAACmF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,gBAAIb,EAAE,CAACoF,KAAP,EAAc;AACZlF,cAAAA,GAAG,IAAI,iCAAkC+E,KAAlC,GAA2C,MAAlD;AACD,aAFD,MAEO;AACL/E,cAAAA,GAAG,IAAI,yBAA0B+E,KAA1B,GAAmC,mBAA1C;AACD;AACF,WAND,MAMO;AACL/E,YAAAA,GAAG,IAAI,gBAAiB+E,KAAjB,GAA0B,8EAAjC;AACD;;AACDtE,UAAAA,cAAc,GAAGgE,kBAAjB;;AACA,cAAI9D,aAAJ,EAAmB;AACjBX,YAAAA,GAAG,IAAI,UAAP;AACD;AACF;AACF,OAtCD,MAsCO,IAAIqC,mBAAJ,EAAyB;AAC9B,YAAIC,iBAAiB,IAAI,SAAzB,EAAoC;AAClCtC,UAAAA,GAAG,IAAI,UAAWiB,KAAX,GAAoB,cAA3B;AACA,cAAIkE,aAAa,GAAGrF,EAAE,CAACmF,aAAvB;AACAnF,UAAAA,EAAE,CAACmF,aAAH,GAAmB/D,GAAG,CAAC+D,aAAJ,GAAoB,IAAvC;AACA/D,UAAAA,GAAG,CAACZ,MAAJ,GAAa0B,YAAb;AACAd,UAAAA,GAAG,CAACV,UAAJ,GAAiBV,EAAE,CAACU,UAAH,GAAgB,uBAAjC;AACAU,UAAAA,GAAG,CAACR,aAAJ,GAAoBZ,EAAE,CAACY,aAAH,GAAmB,uBAAvC;AACAQ,UAAAA,GAAG,CAACkD,SAAJ,GAAgBtE,EAAE,CAACc,IAAH,CAAQ0D,sBAAR,GAAiCxE,EAAE,CAACsE,SAApC,GAAgDtE,EAAE,CAACqB,IAAH,CAAQoD,WAAR,CAAoBzE,EAAE,CAACsE,SAAvB,EAAkC7C,IAAlC,EAAwCzB,EAAE,CAACc,IAAH,CAAQ4D,YAAhD,CAAhE;AACA,cAAIY,SAAS,GAAGrE,KAAK,GAAG,GAAR,GAAcQ,IAAd,GAAqB,GAArC;AACAL,UAAAA,GAAG,CAACmE,WAAJ,CAAgB7D,QAAhB,IAA4BD,IAA5B;AACA,cAAI+D,KAAK,GAAGxF,EAAE,CAACyF,QAAH,CAAYrE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC0B,MAAJ,GAAaD,cAAb;;AACA,cAAI7C,EAAE,CAACqB,IAAH,CAAQqE,aAAR,CAAsBF,KAAtB,EAA6B7D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/CzB,YAAAA,GAAG,IAAI,MAAOF,EAAE,CAACqB,IAAH,CAAQsE,UAAR,CAAmBH,KAAnB,EAA0B7D,SAA1B,EAAqC2D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLpF,YAAAA,GAAG,IAAI,UAAWyB,SAAX,GAAwB,KAAxB,GAAiC2D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACDtF,UAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,eAA1B,GAA6CL,KAA7C,GAAsD,uHAAtD,GAAiLF,KAAjL,GAA0L,GAA1L,GAAiMQ,IAAjM,GAAyM,QAAhN;AACAzB,UAAAA,EAAE,CAACmF,aAAH,GAAmB/D,GAAG,CAAC+D,aAAJ,GAAoBE,aAAvC;AACD,SAnBD,MAmBO;AACLjE,UAAAA,GAAG,CAACZ,MAAJ,GAAa0B,YAAb;AACAd,UAAAA,GAAG,CAACV,UAAJ,GAAiBV,EAAE,CAACU,UAAH,GAAgB,uBAAjC;AACAU,UAAAA,GAAG,CAACR,aAAJ,GAAoBZ,EAAE,CAACY,aAAH,GAAmB,uBAAvC;AACAQ,UAAAA,GAAG,CAACkD,SAAJ,GAAgBtE,EAAE,CAACc,IAAH,CAAQ0D,sBAAR,GAAiCxE,EAAE,CAACsE,SAApC,GAAgDtE,EAAE,CAACqB,IAAH,CAAQoD,WAAR,CAAoBzE,EAAE,CAACsE,SAAvB,EAAkC7C,IAAlC,EAAwCzB,EAAE,CAACc,IAAH,CAAQ4D,YAAhD,CAAhE;AACA,cAAIY,SAAS,GAAGrE,KAAK,GAAG,GAAR,GAAcQ,IAAd,GAAqB,GAArC;AACAL,UAAAA,GAAG,CAACmE,WAAJ,CAAgB7D,QAAhB,IAA4BD,IAA5B;AACA,cAAI+D,KAAK,GAAGxF,EAAE,CAACyF,QAAH,CAAYrE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC0B,MAAJ,GAAaD,cAAb;;AACA,cAAI7C,EAAE,CAACqB,IAAH,CAAQqE,aAAR,CAAsBF,KAAtB,EAA6B7D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/CzB,YAAAA,GAAG,IAAI,MAAOF,EAAE,CAACqB,IAAH,CAAQsE,UAAR,CAAmBH,KAAnB,EAA0B7D,SAA1B,EAAqC2D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLpF,YAAAA,GAAG,IAAI,UAAWyB,SAAX,GAAwB,KAAxB,GAAiC2D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,cAAI3E,aAAJ,EAAmB;AACjBX,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;AACF;AACF;;AACDxB,MAAAA,EAAE,CAACsE,SAAH,GAAeD,iBAAf;AACD;;AACD,QAAIjC,eAAJ,EAAqB;AACnBlC,MAAAA,GAAG,IAAI,KAAP;AACD;;AACDA,IAAAA,GAAG,IAAI,MAAP;;AACA,QAAIW,aAAJ,EAAmB;AACjBX,MAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,MAAAA,cAAc,IAAI,GAAlB;AACD;AACF;;AACD,MAAIqE,YAAY,GAAG5F,EAAE,CAACc,IAAH,CAAQ+E,WAAR,IAAuB,CAAC7F,EAAE,CAACmF,aAA9C;;AACA,MAAIvD,WAAW,CAACS,MAAhB,EAAwB;AACtB,QAAIyD,IAAI,GAAGlE,WAAX;;AACA,QAAIkE,IAAJ,EAAU;AACR,UAAIrC,YAAJ;AAAA,UAAkBsC,EAAE,GAAG,CAAC,CAAxB;AAAA,UACEC,EAAE,GAAGF,IAAI,CAACzD,MAAL,GAAc,CADrB;;AAEA,aAAO0D,EAAE,GAAGC,EAAZ,EAAgB;AACdvC,QAAAA,YAAY,GAAGqC,IAAI,CAACC,EAAE,IAAI,CAAP,CAAnB;AACA,YAAIE,IAAI,GAAG1F,OAAO,CAACkD,YAAD,CAAlB;;AACA,YAAIzD,EAAE,CAACqB,IAAH,CAAQ6E,cAAR,CAAuBD,IAAvB,EAA6BjG,EAAE,CAACmG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9C,cAAIC,KAAK,GAAGrG,EAAE,CAACqB,IAAH,CAAQiF,WAAR,CAAoB7C,YAApB,CAAZ;AAAA,cACE6B,SAAS,GAAGrE,KAAK,GAAGoF,KADtB;AAAA,cAEEE,WAAW,GAAGX,YAAY,IAAIK,IAAI,CAACO,OAAL,KAAiBC,SAFjD;AAGArF,UAAAA,GAAG,CAACZ,MAAJ,GAAayF,IAAb;AACA7E,UAAAA,GAAG,CAACV,UAAJ,GAAiBD,WAAW,GAAG4F,KAA/B;AACAjF,UAAAA,GAAG,CAACR,aAAJ,GAAoBD,cAAc,GAAG,GAAjB,GAAuBX,EAAE,CAACqB,IAAH,CAAQqF,cAAR,CAAuBjD,YAAvB,CAA3C;AACArC,UAAAA,GAAG,CAACkD,SAAJ,GAAgBtE,EAAE,CAACqB,IAAH,CAAQsF,OAAR,CAAgB3G,EAAE,CAACsE,SAAnB,EAA8Bb,YAA9B,EAA4CzD,EAAE,CAACc,IAAH,CAAQ4D,YAApD,CAAhB;AACAtD,UAAAA,GAAG,CAACmE,WAAJ,CAAgB7D,QAAhB,IAA4B1B,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBH,YAAvB,CAA5B;AACA,cAAI+B,KAAK,GAAGxF,EAAE,CAACyF,QAAH,CAAYrE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC0B,MAAJ,GAAaD,cAAb;;AACA,cAAI7C,EAAE,CAACqB,IAAH,CAAQqE,aAAR,CAAsBF,KAAtB,EAA6B7D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/C6D,YAAAA,KAAK,GAAGxF,EAAE,CAACqB,IAAH,CAAQsE,UAAR,CAAmBH,KAAnB,EAA0B7D,SAA1B,EAAqC2D,SAArC,CAAR;AACA,gBAAIsB,QAAQ,GAAGtB,SAAf;AACD,WAHD,MAGO;AACL,gBAAIsB,QAAQ,GAAGjF,SAAf;AACAzB,YAAAA,GAAG,IAAI,UAAWyB,SAAX,GAAwB,KAAxB,GAAiC2D,SAAjC,GAA8C,IAArD;AACD;;AACD,cAAIiB,WAAJ,EAAiB;AACfrG,YAAAA,GAAG,IAAI,MAAOsF,KAAP,GAAgB,GAAvB;AACD,WAFD,MAEO;AACL,gBAAIrC,aAAa,IAAIA,aAAa,CAACM,YAAD,CAAlC,EAAkD;AAChDvD,cAAAA,GAAG,IAAI,UAAW0G,QAAX,GAAuB,oBAAvB,GAA+CpF,UAA/C,GAA6D,YAApE;AACA,kBAAI6C,iBAAiB,GAAGrE,EAAE,CAACsE,SAA3B;AAAA,kBACEK,kBAAkB,GAAGhE,cADvB;AAAA,kBAEEkG,gBAAgB,GAAG7G,EAAE,CAACqB,IAAH,CAAQyF,YAAR,CAAqBrD,YAArB,CAFrB;;AAGA,kBAAIzD,EAAE,CAACc,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClCxE,gBAAAA,EAAE,CAACsE,SAAH,GAAetE,EAAE,CAACqB,IAAH,CAAQsF,OAAR,CAAgBtC,iBAAhB,EAAmCZ,YAAnC,EAAiDzD,EAAE,CAACc,IAAH,CAAQ4D,YAAzD,CAAf;AACD;;AACD/D,cAAAA,cAAc,GAAGX,EAAE,CAACY,aAAH,GAAmB,WAApC;AACA,kBAAIgE,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB3E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIF,EAAE,CAAC8E,YAAH,KAAoB,KAAxB,EAA+B;AAC7B5E,gBAAAA,GAAG,IAAI,oBAAoBc,aAAa,IAAI,UAArC,IAAmD,sCAAnD,GAA6FhB,EAAE,CAACsE,SAAhG,GAA6G,iBAA7G,GAAkItE,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBjD,cAAvB,CAAlI,GAA4K,kCAA5K,GAAkNkG,gBAAlN,GAAsO,OAA7O;;AACA,oBAAI7G,EAAE,CAACc,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B7E,kBAAAA,GAAG,IAAI,gBAAP;;AACA,sBAAIF,EAAE,CAACc,IAAH,CAAQ0D,sBAAZ,EAAoC;AAClCtE,oBAAAA,GAAG,IAAI,wBAAP;AACD,mBAFD,MAEO;AACLA,oBAAAA,GAAG,IAAI,uCAAwC2G,gBAAxC,GAA4D,MAAnE;AACD;;AACD3G,kBAAAA,GAAG,IAAI,KAAP;AACD;;AACD,oBAAIF,EAAE,CAACc,IAAH,CAAQkE,OAAZ,EAAqB;AACnB9E,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFT,EAAE,CAACU,UAAxF,GAAsG,WAAtG,GAAqHO,KAArH,GAA8H,GAArI;AACD;;AACDf,gBAAAA,GAAG,IAAI,KAAP;AACD,eAfD,MAeO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAI+E,KAAK,GAAG/E,GAAZ;AACAA,cAAAA,GAAG,GAAG0E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAAClF,EAAE,CAACmF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIb,EAAE,CAACoF,KAAP,EAAc;AACZlF,kBAAAA,GAAG,IAAI,iCAAkC+E,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACL/E,kBAAAA,GAAG,IAAI,yBAA0B+E,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACL/E,gBAAAA,GAAG,IAAI,gBAAiB+E,KAAjB,GAA0B,8EAAjC;AACD;;AACDtE,cAAAA,cAAc,GAAGgE,kBAAjB;AACA3E,cAAAA,EAAE,CAACsE,SAAH,GAAeD,iBAAf;AACAnE,cAAAA,GAAG,IAAI,YAAP;AACD,aA5CD,MA4CO;AACL,kBAAIW,aAAJ,EAAmB;AACjBX,gBAAAA,GAAG,IAAI,UAAW0G,QAAX,GAAuB,oBAAvB,GAA+CpF,UAA/C,GAA6D,oBAApE;AACD,eAFD,MAEO;AACLtB,gBAAAA,GAAG,IAAI,UAAW0G,QAAX,GAAuB,oBAA9B;AACD;AACF;;AACD1G,YAAAA,GAAG,IAAI,MAAOsF,KAAP,GAAgB,KAAvB;AACD;AACF;;AACD,YAAI3E,aAAJ,EAAmB;AACjBX,UAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,UAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;;AACD,MAAIwF,IAAI,GAAG9E,cAAX;;AACA,MAAI8E,IAAJ,EAAU;AACR,QAAIjD,UAAJ;AAAA,QAAgBkD,EAAE,GAAG,CAAC,CAAtB;AAAA,QACEC,EAAE,GAAGF,IAAI,CAAC1E,MAAL,GAAc,CADrB;;AAEA,WAAO2E,EAAE,GAAGC,EAAZ,EAAgB;AACdnD,MAAAA,UAAU,GAAGiD,IAAI,CAACC,EAAE,IAAI,CAAP,CAAjB;AACA,UAAIf,IAAI,GAAGlE,YAAY,CAAC+B,UAAD,CAAvB;;AACA,UAAI9D,EAAE,CAACqB,IAAH,CAAQ6E,cAAR,CAAuBD,IAAvB,EAA6BjG,EAAE,CAACmG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9ChF,QAAAA,GAAG,CAACZ,MAAJ,GAAayF,IAAb;AACA7E,QAAAA,GAAG,CAACV,UAAJ,GAAiBV,EAAE,CAACU,UAAH,GAAgB,oBAAhB,GAAuCV,EAAE,CAACqB,IAAH,CAAQiF,WAAR,CAAoBxC,UAApB,CAAxD;AACA1C,QAAAA,GAAG,CAACR,aAAJ,GAAoBZ,EAAE,CAACY,aAAH,GAAmB,qBAAnB,GAA2CZ,EAAE,CAACqB,IAAH,CAAQqF,cAAR,CAAuB5C,UAAvB,CAA/D;AACA5D,QAAAA,GAAG,IAAI,eAAgBuB,IAAhB,GAAwB,MAAxB,GAAkCR,KAAlC,GAA2C,OAAlD;;AACA,YAAI0B,cAAJ,EAAoB;AAClBzC,UAAAA,GAAG,IAAI,gDAAiDe,KAAjD,GAA0D,IAA1D,GAAkEQ,IAAlE,GAA0E,eAAjF;AACD;;AACDvB,QAAAA,GAAG,IAAI,UAAWF,EAAE,CAACiE,UAAH,CAAcH,UAAd,CAAX,GAAwC,QAAxC,GAAoDrC,IAApD,GAA4D,OAAnE;AACAL,QAAAA,GAAG,CAACkD,SAAJ,GAAgBtE,EAAE,CAACqB,IAAH,CAAQoD,WAAR,CAAoBzE,EAAE,CAACsE,SAAvB,EAAkC7C,IAAlC,EAAwCzB,EAAE,CAACc,IAAH,CAAQ4D,YAAhD,CAAhB;AACA,YAAIY,SAAS,GAAGrE,KAAK,GAAG,GAAR,GAAcQ,IAAd,GAAqB,GAArC;AACAL,QAAAA,GAAG,CAACmE,WAAJ,CAAgB7D,QAAhB,IAA4BD,IAA5B;AACA,YAAI+D,KAAK,GAAGxF,EAAE,CAACyF,QAAH,CAAYrE,GAAZ,CAAZ;AACAA,QAAAA,GAAG,CAAC0B,MAAJ,GAAaD,cAAb;;AACA,YAAI7C,EAAE,CAACqB,IAAH,CAAQqE,aAAR,CAAsBF,KAAtB,EAA6B7D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/CzB,UAAAA,GAAG,IAAI,MAAOF,EAAE,CAACqB,IAAH,CAAQsE,UAAR,CAAmBH,KAAnB,EAA0B7D,SAA1B,EAAqC2D,SAArC,CAAP,GAA0D,GAAjE;AACD,SAFD,MAEO;AACLpF,UAAAA,GAAG,IAAI,UAAWyB,SAAX,GAAwB,KAAxB,GAAiC2D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,YAAI3E,aAAJ,EAAmB;AACjBX,UAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,QAAAA,GAAG,IAAI,KAAP;;AACA,YAAIW,aAAJ,EAAmB;AACjBX,UAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,QAAAA,GAAG,IAAI,MAAP;;AACA,YAAIW,aAAJ,EAAmB;AACjBX,UAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,UAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;;AACD,MAAIvB,EAAE,CAACc,IAAH,CAAQmC,EAAZ,EAAgB;AACd,QAAIiE,IAAI,GAAG3D,eAAX;;AACA,QAAI2D,IAAJ,EAAU;AACR,UAAI/C,WAAJ;AAAA,UAAiBgD,EAAE,GAAG,CAAC,CAAvB;AAAA,UACEC,EAAE,GAAGF,IAAI,CAAC7E,MAAL,GAAc,CADrB;;AAEA,aAAO8E,EAAE,GAAGC,EAAZ,EAAgB;AACdjD,QAAAA,WAAW,GAAG+C,IAAI,CAACC,EAAE,IAAI,CAAP,CAAlB;AACA,YAAIE,SAAS,GAAGhE,aAAa,CAACc,WAAD,CAA7B;AAAA,YACE8B,IAAI,GAAGoB,SAAS,CAAC7G,MADnB;;AAEA,YAAIR,EAAE,CAACqB,IAAH,CAAQ6E,cAAR,CAAuBD,IAAvB,EAA6BjG,EAAE,CAACmG,KAAH,CAASC,GAAtC,CAAJ,EAAgD;AAC9ChF,UAAAA,GAAG,CAACZ,MAAJ,GAAayF,IAAb;AACA7E,UAAAA,GAAG,CAACV,UAAJ,GAAiBV,EAAE,CAACU,UAAH,GAAgB,gBAAhB,GAAmCV,EAAE,CAACqB,IAAH,CAAQiF,WAAR,CAAoBnC,WAApB,CAAnC,GAAsE,SAAvF;AACA/C,UAAAA,GAAG,CAACR,aAAJ,GAAoBZ,EAAE,CAACY,aAAH,GAAmB,iBAAnB,GAAuCZ,EAAE,CAACqB,IAAH,CAAQqF,cAAR,CAAuBvC,WAAvB,CAAvC,GAA6E,SAAjG;AACAjE,UAAAA,GAAG,IAAI,qBAAsBC,IAAtB,GAA8B,iBAA9B,GAAmDsB,IAAnD,GAA2D,MAA3D,GAAqER,KAArE,GAA8E,OAArF;;AACA,cAAI0B,cAAJ,EAAoB;AAClBzC,YAAAA,GAAG,IAAI,gDAAiDe,KAAjD,GAA0D,IAA1D,GAAkEQ,IAAlE,GAA0E,eAAjF;AACD;;AACDvB,UAAAA,GAAG,IAAI,UAAWF,EAAE,CAACiE,UAAH,CAAcE,WAAd,CAAX,GAAyC,QAAzC,GAAqD1C,IAArD,GAA6D,kBAA7D,GAAmFtB,IAAnF,GAA2F,MAAlG;AACAiB,UAAAA,GAAG,CAACkD,SAAJ,GAAgBtE,EAAE,CAACqB,IAAH,CAAQoD,WAAR,CAAoBzE,EAAE,CAACsE,SAAvB,EAAkC7C,IAAlC,EAAwCzB,EAAE,CAACc,IAAH,CAAQ4D,YAAhD,CAAhB;AACA,cAAIY,SAAS,GAAGrE,KAAK,GAAG,GAAR,GAAcQ,IAAd,GAAqB,GAArC;AACAL,UAAAA,GAAG,CAACmE,WAAJ,CAAgB7D,QAAhB,IAA4BD,IAA5B;AACA,cAAI+D,KAAK,GAAGxF,EAAE,CAACyF,QAAH,CAAYrE,GAAZ,CAAZ;AACAA,UAAAA,GAAG,CAAC0B,MAAJ,GAAaD,cAAb;;AACA,cAAI7C,EAAE,CAACqB,IAAH,CAAQqE,aAAR,CAAsBF,KAAtB,EAA6B7D,SAA7B,IAA0C,CAA9C,EAAiD;AAC/CzB,YAAAA,GAAG,IAAI,MAAOF,EAAE,CAACqB,IAAH,CAAQsE,UAAR,CAAmBH,KAAnB,EAA0B7D,SAA1B,EAAqC2D,SAArC,CAAP,GAA0D,GAAjE;AACD,WAFD,MAEO;AACLpF,YAAAA,GAAG,IAAI,UAAWyB,SAAX,GAAwB,KAAxB,GAAiC2D,SAAjC,GAA8C,IAA9C,GAAsDE,KAAtD,GAA+D,GAAtE;AACD;;AACD,cAAI3E,aAAJ,EAAmB;AACjBX,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,KAAP;;AACA,cAAIW,aAAJ,EAAmB;AACjBX,YAAAA,GAAG,IAAI,WAAYsB,UAAZ,GAA0B,WAAjC;AACD;;AACDtB,UAAAA,GAAG,IAAI,MAAP;;AACA,cAAIW,aAAJ,EAAmB;AACjBX,YAAAA,GAAG,IAAI,UAAWsB,UAAX,GAAyB,MAAhC;AACAD,YAAAA,cAAc,IAAI,GAAlB;AACD;;AACD,cAAI+F,MAAM,GAAGD,SAAS,CAACE,OAAvB;AAAA,cACEC,MAAM,GAAGH,SAAS,CAACI,OADrB;;AAEA,cAAIH,MAAM,KAAKb,SAAX,IAAwBe,MAAM,KAAKf,SAAvC,EAAkD;AAChDvG,YAAAA,GAAG,IAAI,UAAWgB,MAAX,GAAqB,WAA5B;AACA,gBAAIyD,kBAAkB,GAAGhE,cAAzB;;AACA,gBAAI2G,MAAM,KAAKb,SAAf,EAA0B;AACxB,kBAAIiB,MAAM,GAAGJ,MAAb;AAAA,kBACEK,OAAO,GAAG,SADZ;AAAA,kBAEEC,WAAW,GAAG,MAFhB;AAGA1H,cAAAA,GAAG,IAAI,MAAOgB,MAAP,GAAiB,gBAAjB,GAAqCf,IAArC,GAA6C,MAA7C,GAAuDmH,MAAvD,GAAiE,IAAxE;AACA3G,cAAAA,cAAc,GAAGX,EAAE,CAACY,aAAH,GAAmB,wBAApC;AACAV,cAAAA,GAAG,IAAI,YAAagB,MAAb,GAAuB,QAA9B;AACA,kBAAI0D,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB3E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIF,EAAE,CAAC8E,YAAH,KAAoB,KAAxB,EAA+B;AAC7B5E,gBAAAA,GAAG,IAAI,oBAAoBc,aAAa,IAAI,eAArC,IAAwD,sCAAxD,GAAkGhB,EAAE,CAACsE,SAArG,GAAkH,iBAAlH,GAAuItE,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBjD,cAAvB,CAAvI,GAAiL,yBAAjL,GAA8MgH,OAA9M,GAAyN,aAAzN,GAA0OD,MAA1O,GAAoP,eAApP,GAAuQ1H,EAAE,CAACqB,IAAH,CAAQyF,YAAR,CAAqB3C,WAArB,CAAvQ,GAA4S,OAAnT;;AACA,oBAAInE,EAAE,CAACc,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B7E,kBAAAA,GAAG,IAAI,mCAAoC0H,WAApC,GAAmD,QAAnD,GAA+DF,MAA/D,GAAyE,gCAAzE,GAA6G1H,EAAE,CAACqB,IAAH,CAAQyF,YAAR,CAAqB3C,WAArB,CAA7G,GAAkJ,MAAzJ;AACD;;AACD,oBAAInE,EAAE,CAACc,IAAH,CAAQkE,OAAZ,EAAqB;AACnB9E,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFT,EAAE,CAACU,UAAxF,GAAsG,WAAtG,GAAqHO,KAArH,GAA8H,GAArI;AACD;;AACDf,gBAAAA,GAAG,IAAI,KAAP;AACD,eATD,MASO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAI+E,KAAK,GAAG/E,GAAZ;AACAA,cAAAA,GAAG,GAAG0E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAAClF,EAAE,CAACmF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIb,EAAE,CAACoF,KAAP,EAAc;AACZlF,kBAAAA,GAAG,IAAI,iCAAkC+E,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACL/E,kBAAAA,GAAG,IAAI,yBAA0B+E,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACL/E,gBAAAA,GAAG,IAAI,gBAAiB+E,KAAjB,GAA0B,8EAAjC;AACD;;AACD/E,cAAAA,GAAG,IAAI,KAAP;;AACA,kBAAIsH,MAAM,KAAKf,SAAf,EAA0B;AACxBvG,gBAAAA,GAAG,IAAI,QAAP;AACD;AACF;;AACD,gBAAIsH,MAAM,KAAKf,SAAf,EAA0B;AACxB,kBAAIiB,MAAM,GAAGF,MAAb;AAAA,kBACEG,OAAO,GAAG,SADZ;AAAA,kBAEEC,WAAW,GAAG,MAFhB;AAGA1H,cAAAA,GAAG,IAAI,MAAOgB,MAAP,GAAiB,gBAAjB,GAAqCf,IAArC,GAA6C,MAA7C,GAAuDqH,MAAvD,GAAiE,IAAxE;AACA7G,cAAAA,cAAc,GAAGX,EAAE,CAACY,aAAH,GAAmB,wBAApC;AACAV,cAAAA,GAAG,IAAI,YAAagB,MAAb,GAAuB,QAA9B;AACA,kBAAI0D,UAAU,GAAGA,UAAU,IAAI,EAA/B;AACAA,cAAAA,UAAU,CAACC,IAAX,CAAgB3E,GAAhB;AACAA,cAAAA,GAAG,GAAG,EAAN;AAAU;;AACV,kBAAIF,EAAE,CAAC8E,YAAH,KAAoB,KAAxB,EAA+B;AAC7B5E,gBAAAA,GAAG,IAAI,oBAAoBc,aAAa,IAAI,eAArC,IAAwD,sCAAxD,GAAkGhB,EAAE,CAACsE,SAArG,GAAkH,iBAAlH,GAAuItE,EAAE,CAACqB,IAAH,CAAQuC,cAAR,CAAuBjD,cAAvB,CAAvI,GAAiL,yBAAjL,GAA8MgH,OAA9M,GAAyN,aAAzN,GAA0OD,MAA1O,GAAoP,eAApP,GAAuQ1H,EAAE,CAACqB,IAAH,CAAQyF,YAAR,CAAqB3C,WAArB,CAAvQ,GAA4S,OAAnT;;AACA,oBAAInE,EAAE,CAACc,IAAH,CAAQiE,QAAR,KAAqB,KAAzB,EAAgC;AAC9B7E,kBAAAA,GAAG,IAAI,mCAAoC0H,WAApC,GAAmD,QAAnD,GAA+DF,MAA/D,GAAyE,gCAAzE,GAA6G1H,EAAE,CAACqB,IAAH,CAAQyF,YAAR,CAAqB3C,WAArB,CAA7G,GAAkJ,MAAzJ;AACD;;AACD,oBAAInE,EAAE,CAACc,IAAH,CAAQkE,OAAZ,EAAqB;AACnB9E,kBAAAA,GAAG,IAAI,+BAAgCO,WAAhC,GAA+C,kCAA/C,GAAqFT,EAAE,CAACU,UAAxF,GAAsG,WAAtG,GAAqHO,KAArH,GAA8H,GAArI;AACD;;AACDf,gBAAAA,GAAG,IAAI,KAAP;AACD,eATD,MASO;AACLA,gBAAAA,GAAG,IAAI,MAAP;AACD;;AACD,kBAAI+E,KAAK,GAAG/E,GAAZ;AACAA,cAAAA,GAAG,GAAG0E,UAAU,CAACM,GAAX,EAAN;;AACA,kBAAI,CAAClF,EAAE,CAACmF,aAAJ,IAAqBtE,aAAzB,EAAwC;AAAE;AACxC,oBAAIb,EAAE,CAACoF,KAAP,EAAc;AACZlF,kBAAAA,GAAG,IAAI,iCAAkC+E,KAAlC,GAA2C,MAAlD;AACD,iBAFD,MAEO;AACL/E,kBAAAA,GAAG,IAAI,yBAA0B+E,KAA1B,GAAmC,mBAA1C;AACD;AACF,eAND,MAMO;AACL/E,gBAAAA,GAAG,IAAI,gBAAiB+E,KAAjB,GAA0B,8EAAjC;AACD;;AACD/E,cAAAA,GAAG,IAAI,KAAP;AACD;;AACDS,YAAAA,cAAc,GAAGgE,kBAAjB;;AACA,gBAAI9D,aAAJ,EAAmB;AACjBX,cAAAA,GAAG,IAAI,UAAWgB,MAAX,GAAqB,MAA5B;AACAK,cAAAA,cAAc,IAAI,GAAlB;AACD;AACF;AACF;AACF;AACF;AACF;;AACD,MAAIV,aAAJ,EAAmB;AACjBX,IAAAA,GAAG,IAAI,MAAOqB,cAAP,GAAyB,OAAzB,GAAoCJ,KAApC,GAA6C,eAApD;AACD;;AACDjB,EAAAA,GAAG,GAAGF,EAAE,CAACqB,IAAH,CAAQwG,WAAR,CAAoB3H,GAApB,CAAN;AACA,SAAOA,GAAP;AACD,CA5bD","sourcesContent":["'use strict';\nmodule.exports = function generate_properties(it, $keyword) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + '.' + $keyword;\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt;\n  var $schemaKeys = Object.keys($schema || {}),\n    $pProperties = it.schema.patternProperties || {},\n    $pPropertyKeys = Object.keys($pProperties),\n    $aProperties = it.schema.additionalProperties,\n    $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n    $noAdditional = $aProperties === false,\n    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n    $removeAdditional = it.opts.removeAdditional,\n    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n    $ownProperties = it.opts.ownProperties,\n    $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n  if (it.opts.v5) {\n    var $pgProperties = it.schema.patternGroups || {},\n      $pgPropertyKeys = Object.keys($pgProperties);\n  }\n  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';\n  if ($checkAdditional) {\n    out += ' for (var ' + ($key) + ' in ' + ($data) + ') {  ';\n    if ($ownProperties) {\n      out += ' if (!Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($key) + ')) continue; ';\n    }\n    if ($someProperties) {\n      out += ' var isAdditional' + ($lvl) + ' = !(false ';\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 5) {\n          out += ' || validate.schema' + ($schemaPath) + '[' + ($key) + '] ';\n        } else {\n          var arr1 = $schemaKeys;\n          if (arr1) {\n            var $propertyKey, i1 = -1,\n              l1 = arr1.length - 1;\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';\n            }\n          }\n        }\n      }\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n        if (arr2) {\n          var $pProperty, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      if (it.opts.v5 && $pgPropertyKeys && $pgPropertyKeys.length) {\n        var arr3 = $pgPropertyKeys;\n        if (arr3) {\n          var $pgProperty, $i = -1,\n            l3 = arr3.length - 1;\n          while ($i < l3) {\n            $pgProperty = arr3[$i += 1];\n            out += ' || ' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      out += ' ); if (isAdditional' + ($lvl) + ') { ';\n    }\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n        } else {\n          out += ' ' + ($nextValid) + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = ''; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ($errorKeyword || 'additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\'' + ($additionalProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'should NOT have additional properties\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + (__err) + ']); ';\n            } else {\n              out += ' validate.errors = [' + (__err) + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n          $errSchemaPath = $currErrSchemaPath;\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + ($errs) + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n        }\n      }\n      it.errorPath = $currentErrorPath;\n    }\n    if ($someProperties) {\n      out += ' } ';\n    }\n    out += ' }  ';\n    if ($breakOnError) {\n      out += ' if (' + ($nextValid) + ') { ';\n      $closingBraces += '}';\n    }\n  }\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n  if ($schemaKeys.length) {\n    var arr4 = $schemaKeys;\n    if (arr4) {\n      var $propertyKey, i4 = -1,\n        l4 = arr4.length - 1;\n      while (i4 < l4) {\n        $propertyKey = arr4[i4 += 1];\n        var $sch = $schema[$propertyKey];\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          var $prop = it.util.getProperty($propertyKey),\n            $passData = $data + $prop,\n            $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';\n          }\n          if ($hasDefault) {\n            out += ' ' + ($code) + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if (' + ($useData) + ' === undefined) { ' + ($nextValid) + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                $currErrSchemaPath = $errSchemaPath,\n                $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if (' + ($useData) + ' === undefined) { ' + ($nextValid) + ' = true; } else { ';\n              } else {\n                out += ' if (' + ($useData) + ' !== undefined) { ';\n              }\n            }\n            out += ' ' + ($code) + ' } ';\n          }\n        }\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  var arr5 = $pPropertyKeys;\n  if (arr5) {\n    var $pProperty, i5 = -1,\n      l5 = arr5.length - 1;\n    while (i5 < l5) {\n      $pProperty = arr5[i5 += 1];\n      var $sch = $pProperties[$pProperty];\n      if (it.util.schemaHasRules($sch, it.RULES.all)) {\n        $it.schema = $sch;\n        $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n        $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n        out += ' for (var ' + ($key) + ' in ' + ($data) + ') {  ';\n        if ($ownProperties) {\n          out += ' if (!Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($key) + ')) continue; ';\n        }\n        out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';\n        $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n        var $passData = $data + '[' + $key + ']';\n        $it.dataPathArr[$dataNxt] = $key;\n        var $code = it.validate($it);\n        $it.baseId = $currentBaseId;\n        if (it.util.varOccurences($code, $nextData) < 2) {\n          out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n        } else {\n          out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n        }\n        if ($breakOnError) {\n          out += ' if (!' + ($nextValid) + ') break; ';\n        }\n        out += ' } ';\n        if ($breakOnError) {\n          out += ' else ' + ($nextValid) + ' = true; ';\n        }\n        out += ' }  ';\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if (it.opts.v5) {\n    var arr6 = $pgPropertyKeys;\n    if (arr6) {\n      var $pgProperty, i6 = -1,\n        l6 = arr6.length - 1;\n      while (i6 < l6) {\n        $pgProperty = arr6[i6 += 1];\n        var $pgSchema = $pgProperties[$pgProperty],\n          $sch = $pgSchema.schema;\n        if (it.util.schemaHasRules($sch, it.RULES.all)) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';\n          $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';\n          out += ' var pgPropCount' + ($lvl) + ' = 0; for (var ' + ($key) + ' in ' + ($data) + ') {  ';\n          if ($ownProperties) {\n            out += ' if (!Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($key) + ')) continue; ';\n          }\n          out += ' if (' + (it.usePattern($pgProperty)) + '.test(' + ($key) + ')) { pgPropCount' + ($lvl) + '++; ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n          var $pgMin = $pgSchema.minimum,\n            $pgMax = $pgSchema.maximum;\n          if ($pgMin !== undefined || $pgMax !== undefined) {\n            out += ' var ' + ($valid) + ' = true; ';\n            var $currErrSchemaPath = $errSchemaPath;\n            if ($pgMin !== undefined) {\n              var $limit = $pgMin,\n                $reason = 'minimum',\n                $moreOrLess = 'less';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' >= ' + ($pgMin) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n              if ($pgMax !== undefined) {\n                out += ' else ';\n              }\n            }\n            if ($pgMax !== undefined) {\n              var $limit = $pgMax,\n                $reason = 'maximum',\n                $moreOrLess = 'more';\n              out += ' ' + ($valid) + ' = pgPropCount' + ($lvl) + ' <= ' + ($pgMax) + '; ';\n              $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';\n              out += '  if (!' + ($valid) + ') {   ';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'patternGroups') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { reason: \\'' + ($reason) + '\\', limit: ' + ($limit) + ', pattern: \\'' + (it.util.escapeQuotes($pgProperty)) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should NOT have ' + ($moreOrLess) + ' than ' + ($limit) + ' properties matching pattern \"' + (it.util.escapeQuotes($pgProperty)) + '\"\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) { /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n            $errSchemaPath = $currErrSchemaPath;\n            if ($breakOnError) {\n              out += ' if (' + ($valid) + ') { ';\n              $closingBraces += '}';\n            }\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n"]},"metadata":{},"sourceType":"script"}