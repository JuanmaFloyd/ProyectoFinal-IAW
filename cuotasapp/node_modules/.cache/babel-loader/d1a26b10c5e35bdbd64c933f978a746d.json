{"ast":null,"code":"var Ajv = require('ajv');\n\nvar validationModule = module.exports = {\n  ajv: new Ajv({\n    allErrors: true,\n    coerceTypes: false,\n    // (https://www.npmjs.com/package/ajv#coercing-data-types)\n    // Remove additional properties if the schema haves additionalProperties = true\n    removeAdditional: false // (https://www.npmjs.com/package/ajv#filtering-data)\n\n  })\n};\n/**\n * Validate the data that is going to be send to API using a JSON Schema\n * @param schema\n * @param data\n * @returns {Array}\n */\n\nvalidationModule.validate = function (schema, data) {\n  var validate = this.ajv.compile(schema);\n  var isValid = validate(data);\n  var validationErrors = []; // Only warn about additionalProperties sended (Do not block code execution)\n\n  if (!isValid) {\n    validate.errors.forEach(function (error) {\n      if (error.keyword === 'additionalProperties') {\n        console.warn('MercadoPago SDK: \"' + error.params.additionalProperty + '\": is not a valid property.');\n      } else {\n        validationErrors.push(error);\n      }\n    });\n  }\n\n  return validationErrors;\n};\n/**\n * Generate error message using the response from AJV\n * @param errors\n * @returns {string}\n */\n\n\nvalidationModule.generateErrorMessage = function (errors) {\n  var message = 'The next fields are failing on validation:';\n  errors.forEach(function (error) {\n    message += ' \"' + error.dataPath + '\": ' + error.message + '.';\n  });\n  return message;\n};","map":{"version":3,"sources":["C:/Users/juanm/Documents/Proyecto_web/ProyectoFinal-IAW/cuotasapp/node_modules/mercadopago/lib/validation.js"],"names":["Ajv","require","validationModule","module","exports","ajv","allErrors","coerceTypes","removeAdditional","validate","schema","data","compile","isValid","validationErrors","errors","forEach","error","keyword","console","warn","params","additionalProperty","push","generateErrorMessage","message","dataPath"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,gBAAgB,GAAGC,MAAM,CAACC,OAAP,GAAiB;AACtCC,EAAAA,GAAG,EAAE,IAAIL,GAAJ,CAAQ;AACXM,IAAAA,SAAS,EAAE,IADA;AAEXC,IAAAA,WAAW,EAAE,KAFF;AAES;AACpB;AACAC,IAAAA,gBAAgB,EAAE,KAJP,CAIa;;AAJb,GAAR;AADiC,CAAxC;AASA;;;;;;;AAMAN,gBAAgB,CAACO,QAAjB,GAA4B,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAClD,MAAIF,QAAQ,GAAG,KAAKJ,GAAL,CAASO,OAAT,CAAiBF,MAAjB,CAAf;AACA,MAAIG,OAAO,GAAGJ,QAAQ,CAACE,IAAD,CAAtB;AACA,MAAIG,gBAAgB,GAAG,EAAvB,CAHkD,CAKlD;;AACA,MAAI,CAACD,OAAL,EAAc;AACZJ,IAAAA,QAAQ,CAACM,MAAT,CAAgBC,OAAhB,CAAwB,UAAUC,KAAV,EAAiB;AACvC,UAAIA,KAAK,CAACC,OAAN,KAAkB,sBAAtB,EAA8C;AAC5CC,QAAAA,OAAO,CAACC,IAAR,CAAa,uBAAuBH,KAAK,CAACI,MAAN,CAAaC,kBAApC,GAAyD,6BAAtE;AACD,OAFD,MAEO;AACLR,QAAAA,gBAAgB,CAACS,IAAjB,CAAsBN,KAAtB;AACD;AACF,KAND;AAOD;;AAED,SAAOH,gBAAP;AACD,CAjBD;AAmBA;;;;;;;AAKAZ,gBAAgB,CAACsB,oBAAjB,GAAwC,UAAUT,MAAV,EAAkB;AACxD,MAAIU,OAAO,GAAG,4CAAd;AAEAV,EAAAA,MAAM,CAACC,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAC9BQ,IAAAA,OAAO,IAAI,OAAOR,KAAK,CAACS,QAAb,GAAwB,KAAxB,GAAgCT,KAAK,CAACQ,OAAtC,GAAgD,GAA3D;AACD,GAFD;AAIA,SAAOA,OAAP;AACD,CARD","sourcesContent":["var Ajv = require('ajv');\n\nvar validationModule = module.exports = {\n  ajv: new Ajv({\n    allErrors: true,\n    coerceTypes: false, // (https://www.npmjs.com/package/ajv#coercing-data-types)\n    // Remove additional properties if the schema haves additionalProperties = true\n    removeAdditional: false // (https://www.npmjs.com/package/ajv#filtering-data)\n  })\n};\n\n/**\n * Validate the data that is going to be send to API using a JSON Schema\n * @param schema\n * @param data\n * @returns {Array}\n */\nvalidationModule.validate = function (schema, data) {\n  var validate = this.ajv.compile(schema);\n  var isValid = validate(data);\n  var validationErrors = [];\n\n  // Only warn about additionalProperties sended (Do not block code execution)\n  if (!isValid) {\n    validate.errors.forEach(function (error) {\n      if (error.keyword === 'additionalProperties') {\n        console.warn('MercadoPago SDK: \"' + error.params.additionalProperty + '\": is not a valid property.');\n      } else {\n        validationErrors.push(error);\n      }\n    });\n  }\n\n  return validationErrors;\n};\n\n/**\n * Generate error message using the response from AJV\n * @param errors\n * @returns {string}\n */\nvalidationModule.generateErrorMessage = function (errors) {\n  var message = 'The next fields are failing on validation:';\n\n  errors.forEach(function (error) {\n    message += ' \"' + error.dataPath + '\": ' + error.message + '.';\n  });\n\n  return message;\n};\n"]},"metadata":{},"sourceType":"script"}